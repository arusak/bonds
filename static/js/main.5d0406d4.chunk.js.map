{"version":3,"sources":["components/bonds-table/bonds-table.module.sass","components/filters/filters.module.sass","components/dashboard/dashboard.module.sass","utils/string.utils.ts","components/bonds-table/bonds-table.component.tsx","utils/type.utils.ts","models/filters.model.ts","utils/filters.utils.ts","utils/option.utils.ts","components/filters/filters.component.tsx","components/dashboard/dashboard.component.tsx","models/bond.view-model.ts","services/bonds.service.ts","models/bond.model.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","formatCurrency","value","digits","toLocaleString","minimumFractionDigits","maximumFractionDigits","BondsTableComponent","props","list","className","styles","table","headRow","map","h","i","key","renderRow","bond","row","isin","cellText","title","name","shortName","cellNumber","matureDate","toFormat","daysToMature","rub","price","couponValue","couponPeriod","couponsToMature","spread","classnames","cellOk","volume","cellGood","millions","formatMillions","calculatedAccruedInterest","totalCashFlow","grossEarnings","couponTax","brokerFee","exchangeFee","netEarnings","netEarningsAnnualPercent","href","target","rel","filtersNames","x","exhaustiveStringTuple","isFilterName","includes","numberTransform","input","Number","nullTransform","identity","transforms","minVolume","maxToMature","minToMature","minNetEarnings","maxNetEarnings","trim","onlyActive","onlyCheap","getTransform","sequenceTOption","sequenceT","option","FiltersComponent","filters","onFiltersChange","handleChange","makeChangeHandler","isMinimized","setMinimized","useState","mainCN","main","main_minimized","digestCN","digest","digest_hidden","minimizerArrowCN","minimizer__arrow","minimizer__arrow_up","container","minimizer_wrapper","minimizer","onClick","parameter","htmlFor","type","id","defaultValue","onChange","callback","event","pipe","fromNullable","getAttribute","filter","transform","diffOption","DashboardComponent","React","Component","state","handleFiltersChange","diff","console","log","fold","this","setState","sanitize","quote","accruedInterest","sortByMatureDate","i1","i2","filterOnlyCheap","item","filterOnlyActive","filterByName","terms","toLowerCase","split","currentItemName","length","find","term","startsWith","filterByVolume","filterByToMature","toMature","diffNow","days","filterByNetEarnings","b","render","sort","disclaimer","makeBondViewModel","model","nominal","nextCouponDays","Math","floor","round","BONDS_BOARDS","getBonds","async","urls","board","replace","promises","resp","fetch","url","json","jsons","Promise","all","securities","reduce","res","cur","concat","data","marketData","marketdata","yields","marketdata_yields","bondMarketData","yieldsData","SECID","BOARDID","SHORTNAME","PREVWAPRICE","YIELDATPREVWAPRICE","COUPONVALUE","NEXTCOUPON","ACCRUEDINT","PREVPRICE","LOTSIZE","FACEVALUE","BOARDNAME","STATUS","MATDATE","DECIMALS","COUPONPERIOD","ISSUESIZE","PREVLEGALCLOSEPRICE","PREVADMITTEDQUOTE","PREVDATE","SECNAME","REMARKS","MARKETCODE","INSTRID","SECTORID","MINSTEP","FACEUNIT","BUYBACKPRICE","BUYBACKDATE","ISIN","LATNAME","REGNUMBER","CURRENCYID","ISSUESIZEPLACED","LISTLEVEL","SECTYPE","COUPONPERCENT","OFFERDATE","SETTLEDATE","LOTVALUE","DateTime","fromISO","couponPercent","nextCouponDate","offerDate","settleDate","averagePrice","securityFromApi","App","setList","useEffect","then","bonds","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5d0406d4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"bonds-table_table__f76cV\",\"cellText\":\"bonds-table_cellText__6Ni_f\",\"cellNumber\":\"bonds-table_cellNumber__10V8f\",\"cellGood\":\"bonds-table_cellGood__25rzV\",\"cellOk\":\"bonds-table_cellOk__30Rkl\",\"row\":\"bonds-table_row__2WZKd\",\"headRow\":\"bonds-table_headRow___zbcg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"filters_container__15Gc-\",\"main\":\"filters_main__P0-WK\",\"main_minimized\":\"filters_main_minimized__tDrVV\",\"digest\":\"filters_digest__3yKhQ\",\"digest_hidden\":\"filters_digest_hidden__U9oz1\",\"minimizer\":\"filters_minimizer__xMcQu\",\"minimizer_wrapper\":\"filters_minimizer_wrapper__34CDo\",\"minimizer__arrow\":\"filters_minimizer__arrow__YGFIB\",\"minimizer__arrow_up\":\"filters_minimizer__arrow_up__3aNTI\",\"parameter\":\"filters_parameter__2w3by\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"dashboard_title__1uPY5\",\"main\":\"dashboard_main__3h5A-\",\"disclaimer\":\"dashboard_disclaimer__279jz\"};","export function formatCurrency(value: number, digits = 2) {\r\n    return value.toLocaleString('ru-RU', { minimumFractionDigits: digits, maximumFractionDigits: digits });\r\n}\r\n\r\nexport function formatMillions(value: number) {\r\n    let millions = value / 1000000;\r\n    return (millions >= 0.1 ? formatCurrency(millions, 1) : '< 0,1') + ' млн.';\r\n}\r\n","import classnames from 'classnames';\r\nimport React from 'react';\r\nimport { BondViewModel } from '../../models/bond.view-model';\r\nimport { formatMillions, formatCurrency as rub } from '../../utils/string.utils';\r\nimport styles from './bonds-table.module.sass';\r\n\r\ntype BondsTableComponentProps = {\r\n    list: BondViewModel[]\r\n}\r\n\r\nexport const BondsTableComponent = (props: BondsTableComponentProps) => {\r\n    const { list } = props;\r\n    return (\r\n        <table className={styles.table}>\r\n            {renderHeader()}\r\n            <tbody>\r\n            {list.map(renderRow)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nfunction renderHeader() {\r\n    return (\r\n        <thead>\r\n        <tr className={styles.headRow}>\r\n            {['Облигация', 'Срок', 'Цена', 'Купон', 'Пер-д', 'Осталось', 'Объем', 'НКД', 'Выплаты\\nк погашению', 'Общий\\nдоход, р', 'Налог', 'Комиссия, р', 'Чистый\\nдоход, р', 'Доходность,\\n% годовых', 'ISIN']\r\n                .map((h, i) => <th key={i}>{h}</th>)}\r\n        </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction renderRow(bond: BondViewModel) {\r\n    return <tr className={styles.row} key={bond.isin}>\r\n        <td className={styles.cellText} title={bond.name}>{bond.shortName}</td>\r\n        <td className={styles.cellNumber} title={bond.matureDate.toFormat('dd.MM.yyyy')}>{bond.daysToMature}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.price)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.couponValue)}</td>\r\n        <td className={styles.cellNumber}>{bond.couponPeriod}</td>\r\n        <td className={styles.cellNumber}>{bond.couponsToMature}</td>\r\n        <td className={styles.cellNumber} title={`Спред ${bond.spread}`}>\r\n            <span className={classnames({\r\n                [styles.cellOk]: bond.volume > 5000000 && bond.volume < 10000000,\r\n                [styles.cellGood]: bond.volume > 10000000,\r\n            })}>{formatMillions(bond.volume)}</span>\r\n        </td>\r\n        <td className={styles.cellNumber}>{rub(bond.calculatedAccruedInterest)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.totalCashFlow)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.grossEarnings)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.couponTax)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.brokerFee + bond.exchangeFee)}</td>\r\n        <td className={styles.cellNumber}>{rub(bond.netEarnings)}</td>\r\n        <td className={styles.cellNumber}>{bond.netEarningsAnnualPercent}&thinsp;%</td>\r\n        <td className={styles.cellText}>\r\n            <a href={`https://www.rusbonds.ru/compare.asp?go=1&tool=${bond.isin}`}\r\n               target=\"_blank\"\r\n               rel=\"noopener noreferrer\">{bond.isin}</a>\r\n        </td>\r\n    </tr>;\r\n}\r\n","//https://stackoverflow.com/a/55266531/2776525\r\nexport const exhaustiveStringTuple = <T extends string>() =>\r\n    <L extends T[]>(\r\n        ...x: L & ([T] extends [L[number]] ? L : [\r\n            Error, 'You are missing ', Exclude<T, L[number]>])\r\n    ) => x;\r\n","import { Option } from 'fp-ts/lib/Option';\r\nimport { exhaustiveStringTuple } from '../utils/type.utils';\r\n\r\nexport type FiltersValues = {\r\n    minVolume: number,\r\n    name: string,\r\n    minToMature: number,\r\n    maxToMature: number,\r\n    minNetEarnings: number,\r\n    maxNetEarnings: number,\r\n    onlyActive: boolean,\r\n    onlyCheap: boolean,\r\n}\r\n\r\nexport type FiltersDiff = Option<Partial<FiltersValues>>;\r\n\r\nexport type FilterName = keyof FiltersValues;\r\n\r\n// all the filter names for refinement\r\nconst filtersNames: FilterName[] = exhaustiveStringTuple<FilterName>()(\r\n    'minVolume',\r\n    'name',\r\n    'minToMature',\r\n    'minNetEarnings',\r\n    'maxNetEarnings',\r\n    'maxToMature',\r\n    'onlyActive',\r\n    'onlyCheap',\r\n);\r\n\r\n// refinement for filter names\r\nexport const isFilterName = (key: string): key is FilterName => filtersNames.includes(key as FilterName);\r\n","import { identity } from 'fp-ts/lib/function';\r\nimport { FilterName } from '../models/filters.model';\r\n\r\nconst numberTransform = (input: string): number => Number(input) || 0;\r\nconst nullTransform = identity;\r\nconst textTransform = (input: string): string => input.trim();\r\n\r\n// converts input string into something for filter\r\nconst transforms: Record<FilterName, (input: string) => unknown> = {\r\n    minVolume: numberTransform,\r\n    maxToMature: numberTransform,\r\n    minToMature: numberTransform,\r\n    minNetEarnings: numberTransform,\r\n    maxNetEarnings: numberTransform,\r\n    name: textTransform,\r\n    onlyActive: nullTransform,\r\n    onlyCheap: nullTransform,\r\n};\r\n\r\nexport const getTransform = (key: FilterName) => transforms[key];\r\n","import { sequenceT } from 'fp-ts/lib/Apply';\r\nimport { Option, option } from 'fp-ts/lib/Option';\r\n\r\nexport const sequenceTOption = sequenceT(option);\r\n\r\nexport type OptionType<FA extends Option<any>> = FA extends Option<infer A> ? A : never;\r\n","import classnames from 'classnames';\r\nimport { filter, fromNullable, map } from 'fp-ts/lib/Option';\r\nimport { pipe } from 'fp-ts/lib/pipeable';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { FiltersDiff, FiltersValues, isFilterName } from '../../models/filters.model';\r\nimport { getTransform } from '../../utils/filters.utils';\r\nimport { sequenceTOption } from '../../utils/option.utils';\r\nimport styles from './filters.module.sass';\r\n\r\ntype OnFiltersChange = (updated: FiltersDiff) => void;\r\ntype FiltersComponentProps = { filters: FiltersValues, onFiltersChange: OnFiltersChange };\r\n\r\nexport const FiltersComponent = ({ filters, onFiltersChange }: FiltersComponentProps) => {\r\n    const handleChange = makeChangeHandler(onFiltersChange);\r\n    const [isMinimized, setMinimized] = useState(false);\r\n    const mainCN = classnames({\r\n        [styles.main]: true,\r\n        [styles.main_minimized]: isMinimized,\r\n    });\r\n    const digestCN = classnames({\r\n        [styles.digest]: true,\r\n        [styles.digest_hidden]: !isMinimized,\r\n    });\r\n    const minimizerArrowCN = classnames({\r\n        [styles.minimizer__arrow]: true,\r\n        [styles.minimizer__arrow_up]: isMinimized,\r\n    });\r\n    const { minVolume, minToMature, maxToMature, minNetEarnings, maxNetEarnings, name } = filters;\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.minimizer_wrapper}>\r\n                <button className={styles.minimizer} onClick={() => setMinimized(!isMinimized)}>\r\n                    <span className={minimizerArrowCN}>»</span>\r\n                </button>\r\n            </div>\r\n            <div className={digestCN}>\r\n                {minVolume && <span>мин. об. {minVolume}, </span>}\r\n                {(minToMature || maxToMature) && <span>срок {minToMature}—{maxToMature || '∞'}, </span>}\r\n                {(minNetEarnings || maxNetEarnings) && <span>дох. {minNetEarnings}—{maxNetEarnings || '∞'}, </span>}\r\n                {name && <span>название «{name}»</span>}\r\n            </div>\r\n            <div className={mainCN}>\r\n                <div className={styles.parameter}>\r\n                    <label htmlFor=\"minVolume\">Объем за день, тыс. руб.</label>\r\n                    <input type=\"number\" id=\"minVolume\" name=\"minVolume\" defaultValue={minVolume}\r\n                           onChange={handleChange}/>\r\n                </div>\r\n                <div className={styles.parameter}>\r\n                    <label htmlFor=\"minToMature\">Погашение через</label>\r\n                    <input type=\"number\" id=\"minToMature\" name=\"minToMature\" defaultValue={minToMature}\r\n                           onChange={handleChange}/>\r\n                    <span> — </span>\r\n                    <input type=\"number\" id=\"maxToMature\" name=\"maxToMature\" defaultValue={maxToMature}\r\n                           onChange={handleChange}/>\r\n                </div>\r\n                <div className={styles.parameter}>\r\n                    <label htmlFor=\"minNetEarnings\">Доходность</label>\r\n                    <input type=\"number\" id=\"minNetEarnings\" name=\"minNetEarnings\" defaultValue={minNetEarnings}\r\n                           onChange={handleChange}/>\r\n                    <span> — </span>\r\n                    <input type=\"number\" id=\"maxNetEarnings\" name=\"maxNetEarnings\" defaultValue={maxNetEarnings}\r\n                           onChange={handleChange}/>\r\n                </div>\r\n                <div className={styles.parameter}>\r\n                    <label htmlFor=\"maxToMature\">По названию (через запятую)</label>\r\n                    <input type=\"text\" id=\"name\" name=\"name\" defaultValue={name} onChange={handleChange}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// return a function which transforms input from any field into a FilterDiff\r\nconst makeChangeHandler = (callback: OnFiltersChange) => (event: ChangeEvent<HTMLInputElement>) => {\r\n    const key = pipe(fromNullable(event.target.getAttribute('name')), filter(isFilterName));\r\n    const value = fromNullable(event.target.value);\r\n    const transform = pipe(key, map(getTransform));\r\n    const diffOption = pipe(sequenceTOption(key, value, transform), map(([key, value, transform]) => ({ [key]: transform(value) })));\r\n    callback(diffOption);\r\n};\r\n\r\n","import { fold } from 'fp-ts/lib/Option';\r\nimport { pipe } from 'fp-ts/lib/pipeable';\r\nimport React from 'react';\r\nimport { BondViewModel } from '../../models/bond.view-model';\r\nimport { FiltersDiff, FiltersValues } from '../../models/filters.model';\r\nimport { BondsTableComponent } from '../bonds-table/bonds-table.component';\r\nimport { FiltersComponent } from '../filters/filters.component';\r\nimport styles from './dashboard.module.sass';\r\n\r\nexport type BondsListProps = {\r\n    list: BondViewModel[];\r\n}\r\n\r\ntype BondListState = { filters: FiltersValues };\r\n\r\nexport class DashboardComponent extends React.Component<BondsListProps, BondListState> {\r\n    state = {\r\n        filters: {\r\n            minVolume: 10000,\r\n            minToMature: 30,\r\n            maxToMature: 548,\r\n            minNetEarnings: 4,\r\n            maxNetEarnings: 20,\r\n            name: '',\r\n            onlyActive: true,\r\n            onlyCheap: true,\r\n        },\r\n    };\r\n\r\n    render() {\r\n        const list = this.props.list\r\n            .filter(this.sanitize)\r\n            .filter(this.filterOnlyActive)\r\n            .filter(this.filterByName)\r\n            .filter(this.filterOnlyCheap)\r\n            .filter(this.filterByVolume)\r\n            .filter(this.filterByToMature)\r\n            .filter(this.filterByNetEarnings)\r\n            .sort(this.sortByMatureDate);\r\n\r\n        return (\r\n            <div>\r\n                <h1 className={styles.title}>Облигации на Мосбирже</h1>\r\n                <div className={styles.main}>\r\n                    <FiltersComponent filters={this.state.filters} onFiltersChange={this.handleFiltersChange}/>\r\n                    <div>\r\n                        {/*{JSON.stringify(this.state.filters, null, 2)}*/}\r\n                    </div>\r\n                    <BondsTableComponent list={list}/>\r\n                </div>\r\n                <div className={styles.disclaimer}>\r\n                    {/*<p>В таблице приведены облигации эмитентов с рейтингом не ниже A со сроками погашения от 1 до 18 мес.</p>*/}\r\n                    <p>Расчёт не учитывает возможную оферту, амортизацию и переменный купон. Для принятия\r\n                        инвестиционного решения\r\n                        изучите информацию об облигации. Проще всего найти её по ISIN на <a\r\n                            href=\"https://www.rusbonds.ru/compare.asp\">сайте\r\n                            Интерфакса</a>.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private handleFiltersChange = (diff: FiltersDiff) => {\r\n        console.log(diff);\r\n        pipe(diff, fold(() => null, diff => {\r\n            const filters = {\r\n                ...this.state.filters,\r\n                ...diff,\r\n            };\r\n            this.setState({ filters });\r\n        }));\r\n    };\r\n\r\n    private sanitize = (bond: BondViewModel) => {\r\n        // todo accruedInterest is 0 in some cases (for subords)\r\n        return bond.quote > 100 && bond.couponPeriod > 10 && (bond.accruedInterest > 0);\r\n    };\r\n\r\n    private sortByMatureDate = (i1: BondViewModel, i2: BondViewModel) => {\r\n        return i1.matureDate > i2.matureDate ? 1 : -1;\r\n    };\r\n\r\n    private filterOnlyCheap = (item: BondViewModel) => {\r\n        return !this.state.filters.onlyCheap || item.couponValue < 100;\r\n    };\r\n\r\n    private filterOnlyActive = (item: BondViewModel) => {\r\n        return !this.state.filters.onlyActive || item.couponValue > 1;\r\n    };\r\n\r\n    private filterByName = (item: BondViewModel) => {\r\n        const { filters: { name } } = this.state;\r\n        const terms = name.toLowerCase().split(',');\r\n        let currentItemName = item.shortName.toLowerCase();\r\n        return name.length === 0 || !!terms.find(term => currentItemName.startsWith(term));\r\n    };\r\n\r\n    private filterByVolume = (item: BondViewModel) => {\r\n        const { filters: { minVolume } } = this.state;\r\n        return !minVolume || item.volume >= minVolume;\r\n    };\r\n\r\n    private filterByToMature = (item: BondViewModel) => {\r\n        const { filters: { minToMature, maxToMature } } = this.state;\r\n        const toMature = item.matureDate.diffNow('days').days;\r\n        return toMature >= minToMature && (!maxToMature || toMature <= maxToMature);\r\n    };\r\n\r\n    private filterByNetEarnings = (item: BondViewModel) => {\r\n        const { filters: { minNetEarnings, maxNetEarnings } } = this.state;\r\n        const netEarnings = item.netEarningsAnnualPercent;\r\n        const b = netEarnings >= minNetEarnings && (!maxNetEarnings || netEarnings <= maxNetEarnings);\r\n        console.log(netEarnings, minNetEarnings, maxNetEarnings, b);\r\n        return b;\r\n    };\r\n}\r\n","import { BondModel } from './bond.model';\r\n\r\nexport type BondViewModel = BondModel & {\r\n    price: number,\r\n    brokerFee: number,\r\n    exchangeFee: number,\r\n    daysToMature: number,\r\n    nextCouponDays: number,\r\n    calculatedAccruedInterest: number,\r\n    couponsToMature: number,\r\n    totalCashFlow: number,\r\n    grossEarnings: number,\r\n    couponTax: number,\r\n    netEarnings: number,\r\n    netEarningsAnnualPercent: number,\r\n}\r\n\r\nconst taxFraction = 0.13;\r\nconst brokerFeeFraction = 0.07 * 0.01;\r\nconst exchangeFeeFraction = 0.01 * 0.01;\r\n\r\nexport const makeBondViewModel = (model: BondModel): BondViewModel => {\r\n    const { nominal, matureDate, couponValue, couponPeriod, quote } = model;\r\n\r\n    const price = nominal * quote / 100;\r\n    const brokerFee = price * brokerFeeFraction;\r\n    const exchangeFee = price * exchangeFeeFraction;\r\n    const daysToMature = matureDate.diffNow('days').days | 0;\r\n    const nextCouponDays = (couponPeriod - daysToMature % couponPeriod - 1);\r\n    const calculatedAccruedInterest = (nextCouponDays + 1) * couponValue / couponPeriod;\r\n    const couponsToMature = Math.floor(daysToMature / couponPeriod) + 1;\r\n    const totalCashFlow = couponsToMature * couponValue + nominal;\r\n    const grossEarnings = totalCashFlow - calculatedAccruedInterest - price;\r\n    const couponTax = grossEarnings * taxFraction;\r\n    const netEarnings = grossEarnings - couponTax - brokerFee - exchangeFee;\r\n    const netEarningsAnnualPercent = Math.round(grossEarnings / price / daysToMature * 365 * 10000) / 100;\r\n\r\n    return {\r\n        ...model,\r\n        price,\r\n        brokerFee,\r\n        exchangeFee,\r\n        daysToMature,\r\n        nextCouponDays,\r\n        calculatedAccruedInterest,\r\n        couponsToMature,\r\n        totalCashFlow,\r\n        grossEarnings,\r\n        couponTax,\r\n        netEarnings,\r\n        netEarningsAnnualPercent,\r\n    };\r\n};\r\n","import { BondModel, securityFromApi } from '../models/bond.model';\r\n\r\nconst BONDS_BASE_URL = 'https://iss.moex.com/iss/engines/stock/markets/bonds/boards/%BOARD%/securities.json';\r\nconst BONDS_BOARDS = ['TQCB', 'EQOB'];\r\n\r\nexport const getBonds = async (): Promise<BondModel[]> => {\r\n    const urls = BONDS_BOARDS.map(board => BONDS_BASE_URL.replace('%BOARD%', board));\r\n    const promises = await urls.map(async url => {\r\n        const resp = await fetch(url);\r\n        return await resp.json();\r\n    });\r\n    const jsons = await Promise.all(promises);\r\n    const securities = jsons.reduce((res, cur) => res.concat(cur?.securities?.data), []);\r\n    const marketData = jsons.reduce((res, cur) => res.concat(cur?.marketdata?.data), []);\r\n    const yields = jsons.reduce((res, cur) => res.concat(cur?.marketdata_yields?.data), []);\r\n\r\n    return securities.map((bond: any) => {\r\n        const bondMarketData = marketData.find((item: any) => bond[0] === item[0]);\r\n        const yieldsData = yields.find((item: any) => bond[0] === item[0]);\r\n        return securityFromApi(bond, bondMarketData, yieldsData);\r\n    });\r\n};\r\n","import { DateTime } from 'luxon';\r\n\r\nexport type BondModel = {\r\n\tshortName: string,\r\n\tname: string,\r\n\tmatureDate: DateTime,\r\n\tsettleDate: DateTime,\r\n\tofferDate: DateTime,\r\n\tisin: string,\r\n\tcouponPercent: number,\r\n\tcouponValue: number,\r\n\tnextCouponDate: DateTime,\r\n\taccruedInterest: number,\r\n\tcouponPeriod: number,\r\n\taveragePrice: number,\r\n\tquote: number,\r\n\tspread: number,\r\n\tvolume: number,\r\n\tnominal: number,\r\n}\r\n\r\nexport function securityFromApi(\r\n\t[SECID, BOARDID, SHORTNAME, PREVWAPRICE, YIELDATPREVWAPRICE, COUPONVALUE, NEXTCOUPON, ACCRUEDINT, PREVPRICE, LOTSIZE, FACEVALUE, BOARDNAME, STATUS, MATDATE, DECIMALS, COUPONPERIOD, ISSUESIZE, PREVLEGALCLOSEPRICE, PREVADMITTEDQUOTE, PREVDATE, SECNAME, REMARKS, MARKETCODE, INSTRID, SECTORID, MINSTEP, FACEUNIT, BUYBACKPRICE, BUYBACKDATE, ISIN, LATNAME, REGNUMBER, CURRENCYID, ISSUESIZEPLACED, LISTLEVEL, SECTYPE, COUPONPERCENT, OFFERDATE, SETTLEDATE, LOTVALUE]\r\n\t\t:\r\n\t\t[string, string, string, number, number, number, string, number, number, number, number, string, string, string, number, number, number, number, number, string, string, string, string, string, string, number, string, number, string, string, string, string, string, number, number, string, number, string, string, number],\r\n\tmarketData: any[],\r\n\tyields: any[],\r\n): BondModel {\r\n\treturn {\r\n\t\tshortName: SHORTNAME,\r\n\t\tname: SECNAME,\r\n\t\tmatureDate: DateTime.fromISO(MATDATE),\r\n\t\taccruedInterest: ACCRUEDINT,\r\n\t\tcouponPercent: COUPONPERCENT,\r\n\t\tcouponPeriod: COUPONPERIOD,\r\n\t\tcouponValue: COUPONVALUE,\r\n\t\tnextCouponDate: DateTime.fromISO(NEXTCOUPON),\r\n\t\tisin: ISIN,\r\n\t\tofferDate: DateTime.fromISO(OFFERDATE),\r\n\t\tsettleDate: DateTime.fromISO(SETTLEDATE),\r\n\t\taveragePrice: PREVWAPRICE,\r\n\t\tquote: yields ? yields[2] : 0,\r\n\t\tspread: marketData[5],\r\n\t\tvolume: marketData[53],\r\n\t\tnominal: LOTVALUE,\r\n\t};\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { BondViewModel, makeBondViewModel } from './models/bond.view-model';\nimport { getBonds } from './services/bonds.service';\n\nfunction App() {\n    const [list, setList] = useState<BondViewModel[]>([]);\n\n    useEffect(() => {\n        // load bonds and make view models\n        getBonds().then(bonds => setList(bonds.map(makeBondViewModel)));\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <DashboardComponent list={list}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}