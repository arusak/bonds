{"version":3,"sources":["list-bonds/bonds-table.module.sass","list-bonds/bonds-list.module.sass","list-bonds/bonds-table.component.tsx","list-bonds/bonds-list.component.tsx","services/bonds.service.ts","models/bond.model.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BondsTableComponent","props","list","className","styles","table","headRow","map","h","i","key","renderRow","security","shortName","name","matureDate","couponValue","isin","couponPeriod","accruedInterest","volume","spread","quote","nominal","price","daysToMature","diffNow","days","accruedInterestMy","couponsToMature","Math","floor","totalCashFlow","grossEarnings","couponTax","netEarnings","netEarningsPercent","round","row","cellText","title","cellNumber","toFormat","$","classnames","cellOk","cellGood","value","millions","formatMillions","digits","toLocaleString","minimumFractionDigits","maximumFractionDigits","BondsListComponent","React","Component","state","filters","minVolume","minToMature","maxToMature","onlyActive","onlyCheap","sanitize","bond","sortByMatureDate","i1","i2","filterOnlyCheap","item","this","filterOnlyActive","filterByName","names","split","length","find","toLowerCase","startsWith","filterByVolume","filterByToMature","toMature","render","filter","sort","main","disclaimer","href","BONDS_BOARDS","getBonds","async","urls","board","replace","promises","resp","fetch","url","json","jsons","Promise","all","securities","reduce","res","cur","concat","data","marketData","marketdata","yields","marketdata_yields","bondMarketData","yieldsData","SECID","BOARDID","SHORTNAME","PREVWAPRICE","YIELDATPREVWAPRICE","COUPONVALUE","NEXTCOUPON","ACCRUEDINT","PREVPRICE","LOTSIZE","FACEVALUE","BOARDNAME","STATUS","MATDATE","DECIMALS","COUPONPERIOD","ISSUESIZE","PREVLEGALCLOSEPRICE","PREVADMITTEDQUOTE","PREVDATE","SECNAME","REMARKS","MARKETCODE","INSTRID","SECTORID","MINSTEP","FACEUNIT","BUYBACKPRICE","BUYBACKDATE","ISIN","LATNAME","REGNUMBER","CURRENCYID","ISSUESIZEPLACED","LISTLEVEL","SECTYPE","COUPONPERCENT","OFFERDATE","SETTLEDATE","LOTVALUE","DateTime","fromISO","couponPercent","nextCoupon","offerDate","settleDate","averagePrice","securityFromApi","App","setList","useState","useEffect","then","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.663aa255.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"bonds-table_table__m2n6p\",\"cellText\":\"bonds-table_cellText__16BaU\",\"cellNumber\":\"bonds-table_cellNumber__2p7DK\",\"cellGood\":\"bonds-table_cellGood__2F0RN\",\"cellOk\":\"bonds-table_cellOk__3XPvV\",\"row\":\"bonds-table_row___2uNI\",\"headRow\":\"bonds-table_headRow__2rbwK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"bonds-list_title__1wPyc\",\"main\":\"bonds-list_main__fgJfl\",\"disclaimer\":\"bonds-list_disclaimer__3xHeq\"};","import classnames from 'classnames';\r\nimport React from 'react';\r\nimport { Bond } from '../models/bond.model';\r\nimport styles from './bonds-table.module.sass';\r\n\r\ntype BondsTableComponentProps = {\r\n    list: Bond[]\r\n}\r\n\r\nexport const BondsTableComponent = (props: BondsTableComponentProps) => {\r\n    const { list } = props;\r\n    return (\r\n        <table className={styles.table}>\r\n            {renderHeader()}\r\n            <tbody>\r\n            {list.map(renderRow)}\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nfunction renderHeader() {\r\n    return (\r\n        <thead>\r\n        <tr className={styles.headRow}>\r\n            {['Облигация', 'Срок', 'Цена', 'Купон', 'Пер-д', 'Осталось', 'Объем', 'НКД', 'Выплаты\\nк погашению', 'Общий\\nдоход, р', 'Налог', 'Чистый\\nдоход, р', 'Доходность,\\n% годовых', 'ISIN']\r\n                .map((h, i) => <th key={i}>{h}</th>)}\r\n        </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nfunction renderRow(security: Bond) {\r\n    const taxFraction = 0.13;\r\n    const { shortName, name, matureDate, couponValue, isin, couponPeriod, accruedInterest, volume, spread, quote } = security;\r\n    const nominal = security.nominal;\r\n    const price = nominal * quote / 100;\r\n    const daysToMature = matureDate.diffNow('days').days | 0;\r\n    const nextCoupon = (couponPeriod - daysToMature % couponPeriod - 1);\r\n    const accruedInterestMy = (nextCoupon + 1) * couponValue / couponPeriod;\r\n    const couponsToMature = Math.floor(daysToMature / couponPeriod) + 1;\r\n    const totalCashFlow = couponsToMature * couponValue + nominal;\r\n    const grossEarnings = totalCashFlow - accruedInterestMy - price;\r\n    const couponTax = grossEarnings * taxFraction;\r\n    const netEarnings = grossEarnings - couponTax;\r\n    const netEarningsPercent = Math.round(grossEarnings / price / daysToMature * 365 * 10000) / 100;\r\n    return <tr className={styles.row} key={isin}>\r\n        <td className={styles.cellText} title={name}>{shortName}</td>\r\n        <td className={styles.cellNumber} title={matureDate.toFormat('dd.MM.yyyy')}>{daysToMature}</td>\r\n        <td className={styles.cellNumber}>{$(price)}</td>\r\n        <td className={styles.cellNumber}>{$(couponValue)}</td>\r\n        <td className={styles.cellNumber}>{couponPeriod}</td>\r\n        <td className={styles.cellNumber}>{couponsToMature}</td>\r\n        <td className={styles.cellNumber} title={`Спред ${spread}`}>\r\n            <span className={classnames({\r\n                [styles.cellOk]: volume > 5000000 && volume < 10000000,\r\n                [styles.cellGood]: volume > 10000000,\r\n            })}>{formatMillions(volume)}</span>\r\n        </td>\r\n        <td className={styles.cellNumber}>{$(accruedInterestMy)} ({$(accruedInterest)})</td>\r\n        <td className={styles.cellNumber}>{$(totalCashFlow)}</td>\r\n        <td className={styles.cellNumber}>{$(grossEarnings)}</td>\r\n        <td className={styles.cellNumber}>{$(couponTax)}</td>\r\n        <td className={styles.cellNumber}>{$(netEarnings)}</td>\r\n        <td className={styles.cellNumber}>{netEarningsPercent}&thinsp;%</td>\r\n        <td className={styles.cellText}>{isin}</td>\r\n    </tr>;\r\n}\r\n\r\nfunction $(value: number, digits = 2) {\r\n    return value.toLocaleString('ru-RU', { minimumFractionDigits: digits, maximumFractionDigits: digits });\r\n}\r\n\r\nfunction formatMillions(value: number) {\r\n    let millions = value / 1000000;\r\n    return (millions >= 0.1 ? $(millions, 1) : '< 0,1') + ' млн.';\r\n}\r\n","import React from 'react';\r\nimport { Bond } from '../models/bond.model';\r\nimport { BondsTableComponent } from './bonds-table.component';\r\nimport styles from './bonds-list.module.sass';\r\n\r\nexport type BondsListProps = {\r\n    list: Bond[];\r\n}\r\n\r\ntype Filters = {\r\n    minVolume: number,\r\n    name: string,\r\n    minToMature: number,\r\n    maxToMature: number,\r\n    onlyActive: boolean,\r\n    onlyCheap: boolean,\r\n}\r\n\r\ntype BondListState = { filters: Filters };\r\n\r\nexport class BondsListComponent extends React.Component<BondsListProps, BondListState> {\r\n    state = {\r\n        filters: {\r\n            minVolume: 10000,\r\n            minToMature: 30,\r\n            maxToMature: 548,\r\n            name: 'ингб,почтар,росморп,рсетилэ,сбер,северст,сзкк,спбго,татнфт,тойота,фолксв,фпк,рсхб,ржд,краснодкр,фск еэс,росатом,челяб,янао,самаробл,промсвб,альфа,башкорт,газпнф,газпрнеф,газпром,гпб,липецкоб,мособ,моэк,мрскце,мрскцп,мтс,мтс,новосиб,новсиб,норник,огк-2,россет,рсети,русгидро,транснф,трнф,хмао,откр,втб,москред,райфб,росбанк',\r\n            onlyActive: true,\r\n            onlyCheap: true,\r\n        },\r\n    };\r\n\r\n    render() {\r\n        const list = this.props.list\r\n            .filter(this.sanitize)\r\n            .filter(this.filterOnlyActive)\r\n            .filter(this.filterByName)\r\n            .filter(this.filterOnlyCheap)\r\n            .filter(this.filterByVolume)\r\n            .filter(this.filterByToMature)\r\n            .sort(this.sortByMatureDate);\r\n\r\n        return (\r\n            <div>\r\n                <h1 className={styles.title}>Облигации на Мосбирже</h1>\r\n                <div className={styles.main}>\r\n                    <BondsTableComponent list={list}/>\r\n                </div>\r\n                <div className={styles.disclaimer}>\r\n                    <p>В таблице приведены облигации эмитентов с рейтингом не ниже A со сроками погашения от 1 до 18\r\n                        мес.</p>\r\n                    <p>Расчёт не учитывает возможную оферту, амортизацию и переменный купон. Для принятия\r\n                        инвестиционного решения\r\n                        изучите информацию об облигации. Проще всего найти её по ISIN на <a\r\n                            href=\"https://www.rusbonds.ru/compare.asp\">сайте\r\n                            Интерфакса</a>.</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private sanitize = (bond: Bond) => {\r\n        // todo accruedInterest is 0 in some cases (for subords)\r\n        return bond.quote > 100 && bond.couponPeriod > 10 && (bond.accruedInterest > 0);\r\n    };\r\n\r\n    private sortByMatureDate = (i1: Bond, i2: Bond) => {\r\n        return i1.matureDate > i2.matureDate ? 1 : -1;\r\n    };\r\n\r\n    private filterOnlyCheap = (item: Bond) => {\r\n        return !this.state.filters.onlyCheap || item.couponValue < 100;\r\n    };\r\n\r\n    private filterOnlyActive = (item: Bond) => {\r\n        return !this.state.filters.onlyActive || item.couponValue > 1;\r\n    };\r\n\r\n    private filterByName = (item: Bond) => {\r\n        const { filters: { name } } = this.state;\r\n        const names = name.split(',');\r\n        return names.length === 0 || !!names.find(name => item.shortName.toLowerCase().startsWith(name));\r\n    };\r\n\r\n    private filterByVolume = (item: Bond) => {\r\n        const { filters: { minVolume } } = this.state;\r\n        return !minVolume || item.volume >= minVolume;\r\n    };\r\n\r\n    private filterByToMature = (item: Bond) => {\r\n        const { filters: { minToMature, maxToMature } } = this.state;\r\n        const toMature = item.matureDate.diffNow('days').days;\r\n        return toMature >= minToMature && toMature <= maxToMature;\r\n    };\r\n}\r\n","import { securityFromApi } from '../models/bond.model';\r\n\r\nconst BONDS_BASE_URL = 'https://iss.moex.com/iss/engines/stock/markets/bonds/boards/%BOARD%/securities.json';\r\nconst BONDS_BOARDS = ['TQCB', 'EQOB'];\r\n\r\nexport const getBonds = async () => {\r\n\tconst urls = BONDS_BOARDS.map(board => BONDS_BASE_URL.replace('%BOARD%', board));\r\n\tconst promises = await urls.map(async url => {\r\n\t\tconst resp = await fetch(url);\r\n\t\treturn await resp.json();\r\n\t});\r\n\tconst jsons = await Promise.all(promises);\r\n\tconst securities = jsons.reduce((res, cur) => res.concat(cur?.securities?.data), []);\r\n\tconst marketData = jsons.reduce((res, cur) => res.concat(cur?.marketdata?.data), []);\r\n\tconst yields = jsons.reduce((res, cur) => res.concat(cur?.marketdata_yields?.data), []);\r\n\r\n\treturn securities.map((bond: any) => {\r\n\t\tconst bondMarketData = marketData.find((item: any) => bond[0] === item[0]);\r\n\t\tconst yieldsData = yields.find((item: any) => bond[0] === item[0]);\r\n\t\treturn securityFromApi(bond, bondMarketData, yieldsData);\r\n\t});\r\n};\r\n","import { DateTime } from 'luxon';\r\n\r\nexport type Bond = {\r\n\tshortName: string,\r\n\tname: string,\r\n\tmatureDate: DateTime,\r\n\tsettleDate: DateTime,\r\n\tofferDate: DateTime,\r\n\tisin: string,\r\n\tcouponPercent: number,\r\n\tcouponValue: number,\r\n\tnextCoupon: DateTime,\r\n\taccruedInterest: number,\r\n\tcouponPeriod: number,\r\n\taveragePrice: number,\r\n\tquote: number,\r\n\tspread: number,\r\n\tvolume: number,\r\n\tnominal: number,\r\n}\r\n\r\nexport function securityFromApi(\r\n\t[SECID, BOARDID, SHORTNAME, PREVWAPRICE, YIELDATPREVWAPRICE, COUPONVALUE, NEXTCOUPON, ACCRUEDINT, PREVPRICE, LOTSIZE, FACEVALUE, BOARDNAME, STATUS, MATDATE, DECIMALS, COUPONPERIOD, ISSUESIZE, PREVLEGALCLOSEPRICE, PREVADMITTEDQUOTE, PREVDATE, SECNAME, REMARKS, MARKETCODE, INSTRID, SECTORID, MINSTEP, FACEUNIT, BUYBACKPRICE, BUYBACKDATE, ISIN, LATNAME, REGNUMBER, CURRENCYID, ISSUESIZEPLACED, LISTLEVEL, SECTYPE, COUPONPERCENT, OFFERDATE, SETTLEDATE, LOTVALUE]\r\n\t\t:\r\n\t\t[string, string, string, number, number, number, string, number, number, number, number, string, string, string, number, number, number, number, number, string, string, string, string, string, string, number, string, number, string, string, string, string, string, number, number, string, number, string, string, number],\r\n\tmarketData: any[],\r\n\tyields: any[],\r\n): Bond {\r\n\treturn {\r\n\t\tshortName: SHORTNAME,\r\n\t\tname: SECNAME,\r\n\t\tmatureDate: DateTime.fromISO(MATDATE),\r\n\t\taccruedInterest: ACCRUEDINT,\r\n\t\tcouponPercent: COUPONPERCENT,\r\n\t\tcouponPeriod: COUPONPERIOD,\r\n\t\tcouponValue: COUPONVALUE,\r\n\t\tnextCoupon: DateTime.fromISO(NEXTCOUPON),\r\n\t\tisin: ISIN,\r\n\t\tofferDate: DateTime.fromISO(OFFERDATE),\r\n\t\tsettleDate: DateTime.fromISO(SETTLEDATE),\r\n\t\taveragePrice: PREVWAPRICE,\r\n\t\tquote: yields ? yields[2] : 0,\r\n\t\tspread: marketData[5],\r\n\t\tvolume: marketData[53],\r\n\t\tnominal: LOTVALUE,\r\n\t};\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { BondsListComponent } from './list-bonds/bonds-list.component';\nimport { getBonds } from './services/bonds.service';\n\nfunction App() {\n\tconst [list, setList] = useState<any[]>([]);\n\tuseEffect(()=>{\n\t\tgetBonds().then(setList);\n\t}, [])\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BondsListComponent list={list} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}